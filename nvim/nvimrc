" Vim-Plug
call plug#begin('~/.nvim/plugged')

" SuperTAB 
Plug 'ervandew/supertab'

" Completion
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}

" NeoSnippet
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" NerdCommenter & NerdTree
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'

" Tern (JS-Completion)
Plug 'marijnh/tern_for_vim'

" Fuzzy File Search
Plug 'kien/ctrlp.vim'

" indentLine
Plug 'Yggdroot/indentLine'

" Tag closer
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'

" HTML Editing
Plug 'Valloric/MatchTagAlways'

" Airline
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Tmux Integration with Airline
Plug 'edkolev/tmuxline.vim'

" Git integration
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

" Highlighting
Plug 'tikhomirov/vim-glsl'
Plug 'evidens/vim-twig'
Plug 'StanAngeloff/php.vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'JulesWang/css.vim' 
Plug 'pangloss/vim-javascript'
Plug 'rust-lang/rust.vim'
Plug 'vim-scripts/django.vim'
Plug 'chrisbra/csv.vim'

Plug 'altercation/vim-colors-solarized'

call plug#end()

" CTRL-P
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
  \ 'fallback': 'find %s -type f'
  \ }

" Closetag.vim
let g:closetag_filenames = "*.html,*.xhtml,*.phtml"

" Highighting Options
" -------------------

syntax on

" Squirrel
au BufNewFile,BufRead *.nut setf squirrel

" Indent Line Config
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char = 'Â¦'

" Angelscript Syntax
au BufRead,BufNewFile *.as set syntax=cpp "angelscript
au BufRead,BufNewFile *.angelscript set syntax=cpp "angelscript

" GLSL syntax
au BufRead,BufNewFile *.vs set syntax=glsl
au BufRead,BufNewFile *.fs set syntax=glsl

" Airline Config
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_inactive_collapse=1
let g:airline_powerline_fonts = 1

" YCM + UltiSnips
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string<Paste>

" let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

let g:UltiSnipsExpandTrigger       = "<c-j>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
let g:UltiSnipsListSnippets        = "<c-k>" "List possible snippets based on current file

set background=dark
colorscheme solarized

if has('gui_running')
    set guifont=Inconsolata\ for\ Powerline\ 12

    set background=dark
    colorscheme solarized
endif

" Set line numbers
set number

" Indention
" ---------

filetype plugin indent on

" Smartindention Configs
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

" Mappings
" --------
" Terminal mappings: ALT+Direction
" HJKL
tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

tnoremap <Esc> <C-\><C-n>

" Set the CTRL+S command
noremap <silent> <C-S>          :update<CR><ESC>
vnoremap <silent> <C-S>         <C-C>:update<CR><ESC>
inoremap <silent> <C-S>         <C-O>:update<CR><ESC>
